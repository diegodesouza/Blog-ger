/* jshint ignore:start */

/* jshint ignore:end */

define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/components/bs-alert', ['exports', 'ember', 'ember-bootstrap/components/bs-alert'], function (exports, Ember, component) {

	'use strict';

	exports['default'] = component['default'];

});
define('dummy/components/bs-button-group', ['exports', 'ember', 'ember-bootstrap/components/bs-button-group'], function (exports, Ember, bsButtonGroup) {

	'use strict';

	exports['default'] = bsButtonGroup['default'];

});
define('dummy/components/bs-button', ['exports', 'ember', 'ember-bootstrap/components/bs-button'], function (exports, Ember, bsButton) {

	'use strict';

	exports['default'] = bsButton['default'];

});
define('dummy/components/bs-dropdown-button', ['exports', 'ember', 'ember-bootstrap/components/bs-dropdown-button'], function (exports, Ember, component) {

	'use strict';

	exports['default'] = component['default'];

});
define('dummy/components/bs-dropdown-menu', ['exports', 'ember', 'ember-bootstrap/components/bs-dropdown-menu'], function (exports, Ember, component) {

	'use strict';

	exports['default'] = component['default'];

});
define('dummy/components/bs-dropdown-toggle', ['exports', 'ember', 'ember-bootstrap/components/bs-dropdown-toggle'], function (exports, Ember, component) {

	'use strict';

	exports['default'] = component['default'];

});
define('dummy/components/bs-dropdown', ['exports', 'ember', 'ember-bootstrap/components/bs-dropdown'], function (exports, Ember, component) {

	'use strict';

	exports['default'] = component['default'];

});
define('dummy/controllers/index', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        active: false
    });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/components/bs-alert.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/components");
  test("modules/ember-bootstrap/components/bs-alert.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/components/bs-alert.js should pass jshint.");
  });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/components/bs-button-group.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/components");
  test("modules/ember-bootstrap/components/bs-button-group.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/components/bs-button-group.js should pass jshint.");
  });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/components/bs-button.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/components");
  test("modules/ember-bootstrap/components/bs-button.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/components/bs-button.js should pass jshint.");
  });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/components/bs-dropdown-button.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/components");
  test("modules/ember-bootstrap/components/bs-dropdown-button.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/components/bs-dropdown-button.js should pass jshint.");
  });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/components/bs-dropdown-menu.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/components");
  test("modules/ember-bootstrap/components/bs-dropdown-menu.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/components/bs-dropdown-menu.js should pass jshint.");
  });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/components/bs-dropdown-toggle.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/components");
  test("modules/ember-bootstrap/components/bs-dropdown-toggle.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/components/bs-dropdown-toggle.js should pass jshint.");
  });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/components/bs-dropdown.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/components");
  test("modules/ember-bootstrap/components/bs-dropdown.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/components/bs-dropdown.js should pass jshint.");
  });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/mixins/dropdown-toggle.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/mixins");
  test("modules/ember-bootstrap/mixins/dropdown-toggle.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/mixins/dropdown-toggle.js should pass jshint.");
  });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/mixins/size-class.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/mixins");
  test("modules/ember-bootstrap/mixins/size-class.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/mixins/size-class.js should pass jshint.");
  });

});
define('dummy/ember-bootstrap/tests/modules/ember-bootstrap/mixins/type-class.jshint', function () {

  'use strict';

  module("JSHint - modules/ember-bootstrap/mixins");
  test("modules/ember-bootstrap/mixins/type-class.js should pass jshint", function () {
    ok(true, "modules/ember-bootstrap/mixins/type-class.js should pass jshint.");
  });

});
define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;

  exports['default'] = {
    name: "App Version",
    initialize: function initialize(container, application) {
      var appName = classify(application.toString());
      Ember['default'].libraries.register(appName, config['default'].APP.version);
    }
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {
      window[classifiedName] = application;
    }
  }

  ;

  exports['default'] = {
    name: "export-application-global",

    initialize: initialize
  };

});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {
    this.route("dropdown");
  });

  exports['default'] = Router;

});
define('dummy/templates/alert', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("strong");
          var el2 = dom.createTextNode("Well done!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" You successfully read this important alert message.");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("strong");
          var el2 = dom.createTextNode("Heads up!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" This alert needs your attention, but it's not super important.");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("strong");
          var el2 = dom.createTextNode("Warning!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Better check yourself, you're not looking too good.");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("strong");
          var el2 = dom.createTextNode("Oh snap!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Change a few things up and try submitting again.");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Alerts");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("Dismissible with animation");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("Dismissibe without animation");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("Not dismissible");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("Bound visibility");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createTextNode(" Show/Hide");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,3,4,contextualElement);
        var morph1 = dom.createMorphAt(fragment,6,7,contextualElement);
        var morph2 = dom.createMorphAt(fragment,9,10,contextualElement);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [13]),-1,0);
        var morph4 = dom.createMorphAt(fragment,14,15,contextualElement);
        block(env, morph0, context, "bs-alert", [], {"type": "success"}, child0, null);
        block(env, morph1, context, "bs-alert", [], {"type": "info", "fade": false}, child1, null);
        block(env, morph2, context, "bs-alert", [], {"type": "warning", "dismissible": false}, child2, null);
        inline(env, morph3, context, "input", [], {"type": "checkbox", "checked": get(env, context, "visible")});
        block(env, morph4, context, "bs-alert", [], {"type": "danger", "visible": get(env, context, "visible")}, child3, null);
        return fragment;
      }
    };
  }()));

});
define('dummy/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"id","title");
        var el2 = dom.createTextNode("Welcome to Ember.js");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        if (this.cachedFragment) { dom.repairClonedNode(fragment,[2]); }
        var morph0 = dom.createMorphAt(fragment,1,2,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('dummy/templates/components/bs-alert', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","button");
            dom.setAttribute(el1,"class","close");
            dom.setAttribute(el1,"aria-label","Close");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"aria-hidden","true");
            var el3 = dom.createTextNode("×");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            element(env, element0, context, "action", ["dismiss"], {});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }
          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);
          block(env, morph0, context, "if", [get(env, context, "dismissible")], {}, child0, null);
          content(env, morph1, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }
        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
        block(env, morph0, context, "unless", [get(env, context, "dismissed")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('dummy/templates/components/bs-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [0]);
          element(env, element0, context, "bind-attr", [], {"class": "icon"});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1,2,3]); }
        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
        var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);
        var morph2 = dom.createMorphAt(fragment,2,3,contextualElement);
        block(env, morph0, context, "if", [get(env, context, "icon")], {}, child0, null);
        content(env, morph1, context, "text");
        content(env, morph2, context, "yield");
        return fragment;
      }
    };
  }()));

});
define('dummy/templates/dropdown', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Dropdown ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","caret");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Home");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Dropdowns");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),-1,-1);
            block(env, morph0, context, "link-to", ["index"], {}, child0, null);
            block(env, morph1, context, "link-to", ["dropdown"], {}, child1, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          if (this.cachedFragment) { dom.repairClonedNode(fragment,[2]); }
          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);
          block(env, morph0, context, "bs-dropdown-toggle", [], {}, child0, null);
          block(env, morph1, context, "bs-dropdown-menu", [], {}, child1, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Dropdown ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","caret");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Home");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Dropdowns");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),-1,-1);
            block(env, morph0, context, "link-to", ["index"], {}, child0, null);
            block(env, morph1, context, "link-to", ["dropdown"], {}, child1, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          if (this.cachedFragment) { dom.repairClonedNode(fragment,[2]); }
          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);
          block(env, morph0, context, "bs-dropdown-toggle", [], {}, child0, null);
          block(env, morph1, context, "bs-dropdown-menu", [], {"align": "right"}, child1, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Dropdown ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","caret");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Home");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Dropdowns");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),-1,-1);
            block(env, morph0, context, "link-to", ["index"], {}, child0, null);
            block(env, morph1, context, "link-to", ["dropdown"], {}, child1, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          if (this.cachedFragment) { dom.repairClonedNode(fragment,[2]); }
          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);
          block(env, morph0, context, "bs-dropdown-toggle", [], {}, child0, null);
          block(env, morph1, context, "bs-dropdown-menu", [], {}, child1, null);
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Dropdown ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","caret");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Home");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Dropdowns");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),-1,-1);
            block(env, morph0, context, "link-to", ["index"], {}, child0, null);
            block(env, morph1, context, "link-to", ["dropdown"], {}, child1, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          if (this.cachedFragment) { dom.repairClonedNode(fragment,[2]); }
          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);
          block(env, morph0, context, "bs-dropdown-button", [], {}, child0, null);
          block(env, morph1, context, "bs-dropdown-menu", [], {}, child1, null);
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createTextNode("Dropdown");
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createElement("span");
            dom.setAttribute(el0,"class","caret");
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Home");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createTextNode("Dropdowns");
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),-1,-1);
            block(env, morph0, context, "link-to", ["index"], {}, child0, null);
            block(env, morph1, context, "link-to", ["dropdown"], {}, child1, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          if (this.cachedFragment) { dom.repairClonedNode(fragment,[3]); }
          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);
          var morph2 = dom.createMorphAt(fragment,2,3,contextualElement);
          block(env, morph0, context, "bs-button", [], {}, child0, null);
          block(env, morph1, context, "bs-dropdown-button", [], {}, child1, null);
          block(env, morph2, context, "bs-dropdown-menu", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Dropdowns");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("nav");
        dom.setAttribute(el1,"id","navbar-example");
        dom.setAttribute(el1,"class","navbar navbar-default navbar-static");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","container-fluid");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","navbar-header");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","navbar-toggle collapsed");
        dom.setAttribute(el4,"type","button");
        dom.setAttribute(el4,"data-toggle","collapse");
        dom.setAttribute(el4,"data-target",".bs-example-js-navbar-collapse");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","sr-only");
        var el6 = dom.createTextNode("Toggle navigation");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","icon-bar");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","icon-bar");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","icon-bar");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"class","navbar-brand");
        dom.setAttribute(el4,"href","#");
        var el5 = dom.createTextNode("Project Name");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","collapse navbar-collapse bs-example-js-navbar-collapse");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","nav navbar-nav");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","nav navbar-nav navbar-right");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment(" /.nav-collapse ");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" /.container-fluid ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("Button dropdowns");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 1, 3]);
        var element1 = dom.childAt(element0, [1]);
        if (this.cachedFragment) { dom.repairClonedNode(element1,[1]); }
        var morph0 = dom.createMorphAt(element1,0,1);
        var morph1 = dom.createMorphAt(element1,1,2);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);
        var morph3 = dom.createMorphAt(fragment,5,6,contextualElement);
        var morph4 = dom.createMorphAt(fragment,6,7,contextualElement);
        block(env, morph0, context, "bs-dropdown", [], {"tagName": "li"}, child0, null);
        block(env, morph1, context, "bs-dropdown", [], {"tagName": "li"}, child1, null);
        block(env, morph2, context, "bs-dropdown", [], {"tagName": "li"}, child2, null);
        block(env, morph3, context, "bs-dropdown", [], {}, child3, null);
        block(env, morph4, context, "bs-dropdown", [], {}, child4, null);
        return fragment;
      }
    };
  }()));

});
define('dummy/templates/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createTextNode("Download");
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createTextNode("1");
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createTextNode("2");
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createTextNode("3");
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);
          var morph2 = dom.createMorphAt(fragment,2,3,contextualElement);
          block(env, morph0, context, "bs-button", [], {"value": 1}, child0, null);
          block(env, morph1, context, "bs-button", [], {"value": 2}, child1, null);
          block(env, morph2, context, "bs-button", [], {"value": 3}, child2, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);
          content(env, morph0, context, "value");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nYou selected:\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }
        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);
        var morph1 = dom.createMorphAt(fragment,3,4,contextualElement);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [5]),0,-1);
        block(env, morph0, context, "bs-button", [], {"active": get(env, context, "active"), "toggle": true, "type": "primary", "icon": "glyphicon glyphicon-download"}, child0, null);
        block(env, morph1, context, "bs-button-group", [], {"value": get(env, context, "buttonGroupValue"), "type": "checkbox"}, child1, null);
        block(env, morph2, context, "each", [get(env, context, "buttonGroupValue")], {"keyword": "value"}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/index.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/index.js should pass jshint', function() { 
    ok(true, 'controllers/index.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/bs-alert-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent("bs-alert", {});

    ember_qunit.test("it renders", function (assert) {
        assert.expect(2);

        // creates the component instance
        var component = this.subject();
        assert.equal(component._state, "preRender");

        // renders the component to the page
        this.render();
        assert.equal(component._state, "inDOM");
    });

    ember_qunit.test("alert has correct CSS classes", function (assert) {
        var component = this.subject({
            type: "success"
        });

        assert.equal(this.$().hasClass("alert"), true, "alert has alert class");
        assert.equal(this.$().hasClass("alert-success"), true, "alert has type class");
    });

    ember_qunit.test("dismissible alert can be hidden by clicking close button", function (assert) {
        var component = this.subject({
            type: "success",
            fade: false
        });

        assert.equal(this.$().find("button.close").length, 1, "alert has close button");
        this.$().find("button.close").click();

        assert.equal(this.$().hasClass("alert"), false, "alert has no alert class");
        assert.equal(this.$().text().trim(), "", "alert has no content");
        assert.equal(component.get("visible"), false, "visible property is false");
        assert.equal(component.get("dismissed"), true, "dismissed property is true");
    });

    // specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']

});
define('dummy/tests/unit/components/bs-alert-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/bs-alert-test.js should pass jshint', function() { 
    ok(true, 'unit/components/bs-alert-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/bs-button-group-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent("bs-button-group", {
        // specify the other units that are required for this test
        needs: ["component:bs-button", "template:components/bs-button"]
    });

    ember_qunit.test("it renders", function (assert) {
        assert.expect(2);

        // creates the component instance
        var component = this.subject();
        assert.equal(component._state, "preRender");

        // renders the component to the page
        this.render();
        assert.equal(component._state, "inDOM");
    });

    ember_qunit.test("button group has correct CSS classes", function (assert) {
        var component = this.subject({
            size: "lg",
            vertical: true,
            justified: true
        });

        assert.equal(this.$().hasClass("btn-group"), true, "has btn-group class");
        assert.equal(this.$().hasClass("btn-group-lg"), true, "has size class");
        assert.equal(this.$().hasClass("btn-group-vertical"), true, "has vertical class");
        assert.equal(this.$().hasClass("btn-group-justified"), true, "has justified class");
    });

    ember_qunit.test("radio button group has value of selected button", function (assert) {
        var template = "{{#bs-button value=1}}1{{/bs-button}}{{#bs-button value=2}}2{{/bs-button}}{{#bs-button value=3}}3{{/bs-button}}",
            component = this.subject({
            template: Ember['default'].Handlebars.compile(template),
            type: "radio"
        });

        for (var i = 0; i < 3; i++) {
            this.$().find("button").eq(i).click();
            assert.equal(component.get("value"), i + 1, "value of button group must match that of clicked button");

            // check button's active property
            for (var k = 0; k < 3; k++) {
                assert.equal(component.get("childButtons").objectAt(k).get("active"), i === k, "only clicked button is active");
            }
        }
    });

    ember_qunit.test("checkbox button group has value of all selected button", function (assert) {
        var template = "{{#bs-button value=1}}1{{/bs-button}}{{#bs-button value=2}}2{{/bs-button}}{{#bs-button value=3}}3{{/bs-button}}",
            component = this.subject({
            template: Ember['default'].Handlebars.compile(template),
            type: "checkbox"
        }),
            expectedValue = [];

        for (var i = 0; i < 3; i++) {
            this.$().find("button").eq(i).click();
            expectedValue.push(i + 1);
            assert.deepEqual(component.get("value"), expectedValue, "value of button group must match array of values of all active buttons");

            // check button's active property
            for (var k = 0; k < 3; k++) {
                assert.equal(component.get("childButtons").objectAt(k).get("active"), k <= i, "every clicked button is active");
            }
        }
    });

    ember_qunit.test("setting radio button group value activates button with same value", function (assert) {
        var template = "{{#bs-button value=1}}1{{/bs-button}}{{#bs-button value=2}}2{{/bs-button}}{{#bs-button value=3}}3{{/bs-button}}",
            component = this.subject({
            template: Ember['default'].Handlebars.compile(template),
            type: "radio"
        });

        this.append();

        for (var i = 0; i < 3; i++) {
            /*jshint loopfunc: true */
            Ember['default'].run(function () {
                component.set("value", i + 1);
            });
            assert.equal(component.get("value"), i + 1, "value must match set value");

            // check button's active property
            for (var k = 0; k < 3; k++) {
                assert.equal(component.get("childButtons").objectAt(k).get("active"), i === k, "only button with same value is active");
            }
        }
    });

    ember_qunit.test("setting checkbox button group value with array of values activates buttons with same value", function (assert) {
        var template = "{{#bs-button value=1}}1{{/bs-button}}{{#bs-button value=2}}2{{/bs-button}}{{#bs-button value=3}}3{{/bs-button}}",
            component = this.subject({
            template: Ember['default'].Handlebars.compile(template),
            type: "checkbox"
        });

        this.append();

        var value = [1, 3];
        Ember['default'].run(function () {
            component.set("value", value);
        });
        assert.deepEqual(component.get("value"), value, "value must match set value");

        // check button's active property
        for (var k = 0; k < 3; k++) {
            assert.equal(component.get("childButtons").objectAt(k).get("active"), value.contains(k + 1), "only buttons with value contained in set value is active");
        }
    });

});
define('dummy/tests/unit/components/bs-button-group-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/bs-button-group-test.js should pass jshint', function() { 
    ok(true, 'unit/components/bs-button-group-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/bs-button-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {

    'use strict';

    ember_qunit.moduleForComponent("bs-button", {});

    ember_qunit.test("it renders", function (assert) {
        assert.expect(2);

        // creates the component instance
        var component = this.subject();
        assert.equal(component._state, "preRender");

        // renders the component to the page
        this.render();
        assert.equal(component._state, "inDOM");
    });

    ember_qunit.test("button has correct CSS classes", function (assert) {
        var component = this.subject({
            type: "primary",
            size: "lg",
            active: true,
            block: true
        });

        assert.equal(this.$().hasClass("btn"), true, "button has btn class");
        assert.equal(this.$().hasClass("btn-primary"), true, "button has type class");
        assert.equal(this.$().hasClass("btn-lg"), true, "button has size class");
        assert.equal(this.$().hasClass("active"), true, "button has active class");
        assert.equal(this.$().hasClass("btn-block"), true, "button has block class");
    });

    ember_qunit.test("button has HTML attributes", function (assert) {
        var attrs = {
            id: "test",
            disabled: true
        };

        var component = this.subject(attrs);

        for (var attr in attrs) {
            var value = attrs[attr] !== true ? attrs[attr] : attr;
            assert.equal(this.$().attr(attr), value);
        }
    });

    ember_qunit.test("button has default label", function (assert) {
        var component = this.subject({
            defaultText: "test"
        });
        assert.equal(this.$().text(), "test");
    });

    ember_qunit.test("button has default type \"button\"", function (assert) {
        var component = this.subject();
        assert.equal(this.$().attr("type"), "button");
    });

    ember_qunit.test("buttonType property allows changing button type", function (assert) {
        var component = this.subject({
            buttonType: "submit"
        });
        assert.equal(this.$().attr("type"), "submit");
    });

    ember_qunit.test("toggle button toggles active state when clicked", function (assert) {
        var component = this.subject({
            toggle: true
        });
        assert.equal(component.get("active"), false);
        this.$().click();
        assert.equal(component.get("active"), true);
        this.$().click();
        assert.equal(component.get("active"), false);
    });

    ember_qunit.test("button with icon property shows icon", function (assert) {
        var component = this.subject({
            icon: "fa fa-check"
        });
        assert.equal(this.$().find("i").hasClass("fa"), true);
        assert.equal(this.$().find("i").hasClass("fa-check"), true);
    });

    ember_qunit.test("button with iconActive and iconInactive properties shows icon depending on active state", function (assert) {
        var component = this.subject({
            iconInactive: "fa fa-plus",
            iconActive: "fa fa-minus"
        });
        assert.equal(this.$().find("i").hasClass("fa"), true);
        assert.equal(this.$().find("i").hasClass("fa-plus"), true);

        Ember['default'].run(function () {
            component.set("active", true);
        });

        assert.equal(this.$().find("i").hasClass("fa"), true);
        assert.equal(this.$().find("i").hasClass("fa-minus"), true);

        Ember['default'].run(function () {
            component.set("active", false);
        });

        assert.equal(this.$().find("i").hasClass("fa"), true);
        assert.equal(this.$().find("i").hasClass("fa-plus"), true);
    });

    ember_qunit.test("clicking a button sends default action with \"value\" property as a parameter", function (assert) {
        var value = "dummy";
        var testController = Ember['default'].Controller.extend({
            actions: {
                testAction: function testAction(actionParam) {
                    assert.equal(actionParam, value, "action parameter matches value property");
                }
            }
        }).create();

        var component = this.subject({
            action: "testAction",
            value: value,
            targetObject: testController
        });

        assert.expect(1);
        this.$().click();
    });

    ember_qunit.test("button text is changed according to button state", function (assert) {
        var component = this.subject({
            defaultText: "text1",
            loadingText: "text2"
        });

        assert.equal(this.$().text(), "text1");

        Ember['default'].run(function () {
            component.set("textState", "loading");
        });

        assert.equal(this.$().text(), "text2");

        Ember['default'].run(function () {
            component.resetState();
        });

        assert.equal(this.$().text(), "text1");
    });

    ember_qunit.test("setting reset to true resets button state", function (assert) {
        var component = this.subject({
            defaultText: "text1",
            loadingText: "text2",
            textState: "loading"
        });

        assert.equal(this.$().text(), "text2");

        Ember['default'].run(function () {
            component.set("reset", 1);
        });

        assert.equal(this.$().text(), "text1");
    });

    ember_qunit.test("clicking a button sends default action with callback, if promise is returned button state is changed according to promise state", function (assert) {
        var promise, resolvePromise;
        var testController = Ember['default'].Controller.extend({
            actions: {
                testAction: function testAction(actionParam, evt, cb) {
                    promise = new Ember['default'].RSVP.Promise(function (resolve) {
                        resolvePromise = resolve;
                    });
                    cb(promise);
                }
            }
        }).create();

        var component = this.subject({
            action: "testAction",
            targetObject: testController,
            defaultText: "default",
            pendingText: "pending",
            resolvedText: "resolved",
            rejectedText: "rejected"
        });

        assert.expect(4);
        this.$().click();
        assert.equal(component.get("textState"), "pending");
        assert.equal(this.$().text(), "pending");

        Ember['default'].run(function () {
            resolvePromise();
        });

        assert.equal(component.get("textState"), "resolved");
        assert.equal(this.$().text(), "resolved");
    });

    // specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']

});
define('dummy/tests/unit/components/bs-button-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/bs-button-test.js should pass jshint', function() { 
    ok(true, 'unit/components/bs-button-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/bs-dropdown-button-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {

    'use strict';

    ember_qunit.moduleForComponent("bs-dropdown-button", "BsDropdownButtonComponent", {});

    ember_qunit.test("it renders", function () {
        expect(2);

        // creates the component instance
        var component = this.subject();
        equal(component._state, "preRender");

        // appends the component to the page
        this.append();
        equal(component._state, "inDOM");
    });

    ember_qunit.test("dropdown button has correct default markup", function () {
        equal(this.$().prop("tagName"), "BUTTON", "dropdown button is a button");
        equal(this.$().hasClass("dropdown-toggle"), true, "has dropdown-toggle class");
        equal(this.$().attr("data-toggle"), "dropdown", "has data-toggle=dropdown attribute");
        equal(this.$().attr("role"), "button", "has role=button");
    });

    ember_qunit.test("clicking dropdown button sends toggleDropdown action", function () {
        var actionHandler = Ember['default'].Controller.extend({
            actions: {
                toggleDropdown: function toggleDropdown() {
                    ok(true, "toggleDropdown action has been called");
                }
            }
        }).create(),
            component = this.subject({
            targetObject: actionHandler
        });
        expect(1);
        this.$().click();
    });

    // specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']

});
define('dummy/tests/unit/components/bs-dropdown-button-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/bs-dropdown-button-test.js should pass jshint', function() { 
    ok(false, 'unit/components/bs-dropdown-button-test.js should pass jshint.\nunit/components/bs-dropdown-button-test.js: line 13, col 3, \'expect\' is not defined.\nunit/components/bs-dropdown-button-test.js: line 17, col 3, \'equal\' is not defined.\nunit/components/bs-dropdown-button-test.js: line 21, col 3, \'equal\' is not defined.\nunit/components/bs-dropdown-button-test.js: line 25, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-button-test.js: line 26, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-button-test.js: line 27, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-button-test.js: line 28, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-button-test.js: line 35, col 21, \'ok\' is not defined.\nunit/components/bs-dropdown-button-test.js: line 42, col 5, \'expect\' is not defined.\n\n9 errors'); 
  });

});
define('dummy/tests/unit/components/bs-dropdown-menu-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent("bs-dropdown-menu", "BsDropdownMenuComponent", {});

  ember_qunit.test("it renders", function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, "preRender");

    // appends the component to the page
    this.append();
    equal(component._state, "inDOM");
  });

  ember_qunit.test("dropdown menu has correct markup", function () {
    equal(this.$().prop("tagName"), "UL", "menu is an unordered list (<ul>) by default");
    equal(this.$().hasClass("dropdown-menu"), true, "menu has dropdown-menu class");
  });

  ember_qunit.test("dropdown menu has correct markup", function () {
    var component = this.subject({
      align: "right"
    });
    equal(this.$().hasClass("dropdown-menu-right"), true, "menu has dropdown-menu-right class");
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('dummy/tests/unit/components/bs-dropdown-menu-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/bs-dropdown-menu-test.js should pass jshint', function() { 
    ok(false, 'unit/components/bs-dropdown-menu-test.js should pass jshint.\nunit/components/bs-dropdown-menu-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/bs-dropdown-menu-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/bs-dropdown-menu-test.js: line 20, col 3, \'equal\' is not defined.\nunit/components/bs-dropdown-menu-test.js: line 25, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-menu-test.js: line 26, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-menu-test.js: line 34, col 5, \'equal\' is not defined.\n\n6 errors'); 
  });

});
define('dummy/tests/unit/components/bs-dropdown-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {

    'use strict';

    ember_qunit.moduleForComponent("bs-dropdown", "BsDropdownComponent", {
        // specify the other units that are required for this test
        needs: ["component:bs-dropdown-button"]
    });

    ember_qunit.test("it renders", function () {
        expect(2);

        // creates the component instance
        var component = this.subject();
        equal(component._state, "preRender");

        // appends the component to the page
        this.append();
        equal(component._state, "inDOM");
    });

    ember_qunit.test("dropdown container has dropdown class", function () {
        equal(this.$().hasClass("dropdown"), true, "has dropdown class");
    });

    ember_qunit.test("dropdown container with dropdown button has btn-group class", function () {
        var component = this.subject({
            template: Ember['default'].Handlebars.compile("{{#bs-dropdown-button}}Dropdown <span class=\"caret\"></span>{{/bs-dropdown-button}}")
        });
        equal(this.$().hasClass("btn-group"), true, "has btn-group class");
    });

    ember_qunit.test("openDropdown action opens dropdown, closeDropdown closes it", function () {
        var component = this.subject();
        Ember['default'].run(function () {
            component.send("openDropdown");
        });
        equal(this.$().hasClass("open"), true, "has open class");
        equal(component.get("open"), true, "open property is true");
        Ember['default'].run(function () {
            component.send("closeDropdown");
        });
        equal(this.$().hasClass("open"), false, "has not open class");
        equal(component.get("open"), false, "open property is false");
    });

    ember_qunit.test("toggleDropdown action toggles dropdown visibility", function () {
        var component = this.subject();
        Ember['default'].run(function () {
            component.send("toggleDropdown");
        });
        equal(this.$().hasClass("open"), true, "has open class");
        equal(component.get("open"), true, "open property is true");
        Ember['default'].run(function () {
            component.send("toggleDropdown");
        });
        equal(this.$().hasClass("open"), false, "has not open class");
        equal(component.get("open"), false, "open property is false");
    });

    ember_qunit.test("opened dropdown will close on outside click", function () {
        var component = this.subject();
        Ember['default'].run(function () {
            component.send("openDropdown");
        });
        this.$();
        Ember['default'].$(document).click();
        equal(this.$().hasClass("open"), false, "has not open class");
        equal(component.get("open"), false, "open property is false");
    });

    ember_qunit.test("clicking dropdown menu will close it", function () {
        var component = this.subject({
            template: Ember['default'].Handlebars.compile("<ul class=\"dropdown-menu\"><li>test</li></ul>")
        });
        Ember['default'].run(function () {
            component.send("openDropdown");
        });
        this.$().find(".dropdown-menu").click();
        equal(this.$().hasClass("open"), false, "has not open class");
        equal(component.get("open"), false, "open property is false");
    });

    ember_qunit.test("clicking dropdown menu when closeOnMenuClick is false will not close it", function () {
        var component = this.subject({
            template: Ember['default'].Handlebars.compile("<ul class=\"dropdown-menu\"><li>test</li></ul>"),
            closeOnMenuClick: false
        });
        Ember['default'].run(function () {
            component.send("openDropdown");
        });
        this.$().find(".dropdown-menu").click();
        equal(this.$().hasClass("open"), true, "has open class");
        equal(component.get("open"), true, "open property is true");
    });

});
define('dummy/tests/unit/components/bs-dropdown-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/bs-dropdown-test.js should pass jshint', function() { 
    ok(false, 'unit/components/bs-dropdown-test.js should pass jshint.\nunit/components/bs-dropdown-test.js: line 14, col 3, \'expect\' is not defined.\nunit/components/bs-dropdown-test.js: line 18, col 3, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 22, col 3, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 28, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 35, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 43, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 44, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 48, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 49, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 58, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 59, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 63, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 64, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 75, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 76, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 88, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 89, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 103, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-test.js: line 104, col 5, \'equal\' is not defined.\n\n19 errors'); 
  });

});
define('dummy/tests/unit/components/bs-dropdown-toggle-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {

    'use strict';

    ember_qunit.moduleForComponent("bs-dropdown-toggle", "BsDropdownToggleComponent", {});

    ember_qunit.test("it renders", function () {
        expect(2);

        // creates the component instance
        var component = this.subject();
        equal(component._state, "preRender");

        // appends the component to the page
        this.append();
        equal(component._state, "inDOM");
    });

    ember_qunit.test("toggle has correct default markup", function () {
        equal(this.$().prop("tagName"), "A", "toggle is an anchor tag by default");
        equal(this.$().attr("href"), "#", "has href attribute");
        equal(this.$().hasClass("dropdown-toggle"), true, "has dropdown-toggle class");
        equal(this.$().attr("data-toggle"), "dropdown", "has data-toggle=dropdown attribute");
        equal(this.$().attr("role"), "button", "has role=button");
    });

    ember_qunit.test("toggle as button does not have href", function () {
        var component = this.subject({
            tagName: "button"
        });
        equal(this.$().prop("tagName"), "BUTTON", "toggle is a button");
        equal(this.$().is("[href]"), false, "does not have href attribute");
    });

    ember_qunit.test("clicking toggle sends toggleDropdown action", function () {
        var actionHandler = Ember['default'].Controller.extend({
            actions: {
                toggleDropdown: function toggleDropdown() {
                    ok(true, "toggleDropdown action has been called");
                }
            }
        }).create(),
            component = this.subject({
            targetObject: actionHandler
        });
        expect(1);
        this.$().click();
    });

    // specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']

});
define('dummy/tests/unit/components/bs-dropdown-toggle-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/bs-dropdown-toggle-test.js should pass jshint', function() { 
    ok(false, 'unit/components/bs-dropdown-toggle-test.js should pass jshint.\nunit/components/bs-dropdown-toggle-test.js: line 13, col 3, \'expect\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 17, col 3, \'equal\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 21, col 3, \'equal\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 25, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 26, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 27, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 28, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 29, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 36, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 37, col 5, \'equal\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 44, col 21, \'ok\' is not defined.\nunit/components/bs-dropdown-toggle-test.js: line 51, col 5, \'expect\' is not defined.\n\n12 errors'); 
  });

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"name":"ember-bootstrap","version":"0.0.7.1e95d64b"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map